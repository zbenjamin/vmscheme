%{
#include "parser.h"  /* Generated by bison. */

int interactive;

static char *str_buf;
static int str_size;
static int str_size_max;

static void str_expand(int);
static void str_appends(char *s);
static void str_appendc(char s);


%}

%option nounput
%option noinput
%option noyywrap
%option bison-bridge

DIGIT    [0-9]
LETTER   [a-zA-Z]
SP_INITIAL [!$%&*/:<=>?^_~]
SP_SUBSEQ  [-+.@]
INITIAL  {LETTER}|{SP_INITIAL}
SUBSEQ   {INITIAL}|{DIGIT}|{SP_SUBSEQ}
RESERVED [\[\]|]

%x STR

%%

\(  { return LP; }
\)  { return RP; }

{DIGIT}+  {
  yylval->num = atoi(yytext);
  return NUMBER;
}

{INITIAL}{SUBSEQ}*|\+|\-|\.\.\.  {
  yylval->str = strdup(yytext);
  return SYMBOL;
}

\" {
  BEGIN(STR);
}

<STR>{
  \" {
    BEGIN(0);
    yylval->str = strndup(str_buf, str_size);
    str_size = 0;
    return STRING;
  }
  \\n { str_appendc('\n'); }
  \\t { str_appendc('\t'); }
  \\r { str_appendc('\r'); }
  \\b { str_appendc('\b'); }
  \\(.|\n) { str_appendc(yytext[1]); }
  [^\\\n\"]+ { str_appends(yytext); }
}

#t { return BOOL_TRUE; }
#f { return BOOL_FALSE; }
' { return QUOTE; }
` { return QUASIQUOTE; }
, { return UNQUOTE; }
,@ { return UNQUOTE_SPLICING; }
\. { return DOT; }

[ \t]                            /* ignore whitespace */
;.*                              /* ignore comments */
\n  { if (interactive) yyterminate(); }

{RESERVED}  {
  printf("reserved character encountered: %s\n", yytext);
}
.  { printf("unrecognized character encountered: %s\n", yytext);
}

%%

void
str_expand(int new_chars)
{
  while (str_size + new_chars >= str_size_max) {
    str_size_max *= 2;
    char *new_buf = malloc(sizeof(char) * str_size_max);
    memcpy(new_buf, str_buf, str_size);
    free(str_buf);
    str_buf = new_buf;
  }
}

void
str_appends(char *s)
{
  int size = strlen(s);
  str_expand(size);
  memcpy(str_buf + str_size, s, size);
  str_size += size;
}

void
str_appendc(char c)
{
  str_expand(1);
  str_buf[str_size++] = c;
}

void
set_scanner_interactive(int flag)
{
  interactive = flag;
  yy_set_interactive(flag);
}

void
init_once()
{
  str_size = 0;
  str_size_max = 1024;
  str_buf = malloc(sizeof(char) * str_size_max);
}
                 
void
reset_scanner()
{
  static int init_once_done = 0;
  if (! init_once_done) {
    init_once();
    init_once_done = 1;
  }

  BEGIN(0);
}
